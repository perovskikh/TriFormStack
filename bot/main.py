import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import httpx
import os
from dotenv import load_dotenv

load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)

# Bot token
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# States for order form
class OrderForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_email = State()
    waiting_for_message = State()

@dp.message(CommandStart())
async def cmd_start(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏", callback_data="catalog")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="contact")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="about")]
    ])
    
    await message.answer(
        "üèóÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TriFormStack!\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "catalog")
async def show_catalog(callback_query: types.CallbackQuery):
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f"{API_BASE_URL}/api/products")
            products = response.json()
            
            if not products:
                await callback_query.message.edit_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
                return
            
            text = "üè† **–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:**\n\n"
            keyboard_buttons = []
            
            for product in products[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
                text += f"**{product['name']}**\n"
                text += f"üí∞ {product['price_per_sqm']} —Ä—É–±/–º¬≤\n"
                text += f"{product['description'][:100]}...\n\n"
                
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üõí {product['name']}", 
                        callback_data=f"product_{product['id']}"
                    )
                ])
            
            keyboard_buttons.append([
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
            
        except Exception as e:
            await callback_query.message.edit_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data.startswith("product_"))
async def show_product(callback_query: types.CallbackQuery):
    product_id = callback_query.data.split("_")[1]
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f"{API_BASE_URL}/api/products/{product_id}")
            product = response.json()
            
            text = f"üè† **{product['name']}**\n\n"
            text += f"üìù {product['description']}\n\n"
            text += f"üí∞ **–¶–µ–Ω–∞:** {product['price_per_sqm']} —Ä—É–±/–º¬≤\n"
            text += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {product['category']}\n"
            
            if product.get('specifications'):
                text += f"üîß **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:** {product['specifications']}\n"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{product_id}")],
                [InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")]
            ])
            
            if product.get('image_url'):
                await callback_query.message.delete()
                await bot.send_photo(
                    callback_query.from_user.id,
                    photo=product['image_url'],
                    caption=text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            else:
                await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
                
        except Exception as e:
            await callback_query.message.edit_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data.startswith("order_"))
async def start_order(callback_query: types.CallbackQuery, state: FSMContext):
    product_id = callback_query.data.split("_")[1]
    await state.update_data(product_id=product_id)
    
    await callback_query.message.edit_text(
        "üìù –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    await state.set_state(OrderForm.waiting_for_name)

@dp.message(OrderForm.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìû –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderForm.waiting_for_phone)

@dp.message(OrderForm.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üìß –£–∫–∞–∂–∏—Ç–µ –≤–∞—à email:")
    await state.set_state(OrderForm.waiting_for_email)

@dp.message(OrderForm.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    await state.set_state(OrderForm.waiting_for_message)

@dp.message(OrderForm.waiting_for_message)
async def process_message(message: Message, state: FSMContext):
    data = await state.get_data()
    
    order_data = {
        "customer_name": data['name'],
        "customer_phone": data['phone'],
        "customer_email": data['email'],
        "product_id": int(data['product_id']),
        "quantity_sqm": 1.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º¬≤
        "message": message.text if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else "",
        "source": "telegram"
    }
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(f"{API_BASE_URL}/api/orders", json=order_data)
            if response.status_code == 200:
                await message.answer(
                    "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
                    "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üôè"
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()

@dp.callback_query(lambda c: c.data == "contact")
async def show_contact(callback_query: types.CallbackQuery):
    text = "üìû **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n"
    text += "üè¢ TriFormStack\n"
    text += "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n"
    text += "üìß Email: info@triformstack.com\n"
    text += "üåê –°–∞–π—Ç: www.triformstack.com\n"
    text += "üìç –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1\n\n"
    text += "‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 9:00-18:00"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback_query: types.CallbackQuery):
    await cmd_start(callback_query.message)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())